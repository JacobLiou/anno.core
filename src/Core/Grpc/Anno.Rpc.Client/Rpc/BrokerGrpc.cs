// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Broker.proto
// </auto-generated>
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Anno.Rpc {
  public static partial class BrokerService
  {
    static readonly string __ServiceName = "Anno.Rpc.BrokerService";

    static readonly grpc::Marshaller<global::Anno.Rpc.BrokerRequest> __Marshaller_Anno_Rpc_BrokerRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Anno.Rpc.BrokerRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Anno.Rpc.BrokerReply> __Marshaller_Anno_Rpc_BrokerReply = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Anno.Rpc.BrokerReply.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Protobuf.WellKnownTypes.Empty> __Marshaller_google_protobuf_Empty = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Protobuf.WellKnownTypes.Empty.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Anno.Rpc.PingReply> __Marshaller_Anno_Rpc_PingReply = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Anno.Rpc.PingReply.Parser.ParseFrom);

    static readonly grpc::Method<global::Anno.Rpc.BrokerRequest, global::Anno.Rpc.BrokerReply> __Method_broker = new grpc::Method<global::Anno.Rpc.BrokerRequest, global::Anno.Rpc.BrokerReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "broker",
        __Marshaller_Anno_Rpc_BrokerRequest,
        __Marshaller_Anno_Rpc_BrokerReply);

    static readonly grpc::Method<global::Google.Protobuf.WellKnownTypes.Empty, global::Anno.Rpc.PingReply> __Method_Ping = new grpc::Method<global::Google.Protobuf.WellKnownTypes.Empty, global::Anno.Rpc.PingReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Ping",
        __Marshaller_google_protobuf_Empty,
        __Marshaller_Anno_Rpc_PingReply);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Anno.Rpc.BrokerReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of BrokerService</summary>
    [grpc::BindServiceMethod(typeof(BrokerService), "BindService")]
    public abstract partial class BrokerServiceBase
    {
      public virtual global::System.Threading.Tasks.Task<global::Anno.Rpc.BrokerReply> broker(global::Anno.Rpc.BrokerRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Anno.Rpc.PingReply> Ping(global::Google.Protobuf.WellKnownTypes.Empty request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for BrokerService</summary>
    public partial class BrokerServiceClient : grpc::ClientBase<BrokerServiceClient>
    {
      /// <summary>Creates a new client for BrokerService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public BrokerServiceClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for BrokerService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public BrokerServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected BrokerServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected BrokerServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      public virtual global::Anno.Rpc.BrokerReply broker(global::Anno.Rpc.BrokerRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return broker(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Anno.Rpc.BrokerReply broker(global::Anno.Rpc.BrokerRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_broker, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Anno.Rpc.BrokerReply> brokerAsync(global::Anno.Rpc.BrokerRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return brokerAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Anno.Rpc.BrokerReply> brokerAsync(global::Anno.Rpc.BrokerRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_broker, null, options, request);
      }
      public virtual global::Anno.Rpc.PingReply Ping(global::Google.Protobuf.WellKnownTypes.Empty request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Ping(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Anno.Rpc.PingReply Ping(global::Google.Protobuf.WellKnownTypes.Empty request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Ping, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Anno.Rpc.PingReply> PingAsync(global::Google.Protobuf.WellKnownTypes.Empty request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PingAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Anno.Rpc.PingReply> PingAsync(global::Google.Protobuf.WellKnownTypes.Empty request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Ping, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override BrokerServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new BrokerServiceClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(BrokerServiceBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_broker, serviceImpl.broker)
          .AddMethod(__Method_Ping, serviceImpl.Ping).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, BrokerServiceBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_broker, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Anno.Rpc.BrokerRequest, global::Anno.Rpc.BrokerReply>(serviceImpl.broker));
      serviceBinder.AddMethod(__Method_Ping, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Protobuf.WellKnownTypes.Empty, global::Anno.Rpc.PingReply>(serviceImpl.Ping));
    }

  }
  public static partial class BrokerCenter
  {
    static readonly string __ServiceName = "Anno.Rpc.BrokerCenter";

    static readonly grpc::Marshaller<global::Anno.Rpc.Micro> __Marshaller_Anno_Rpc_Micro = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Anno.Rpc.Micro.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Anno.Rpc.BrokerReply> __Marshaller_Anno_Rpc_BrokerReply = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Anno.Rpc.BrokerReply.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Anno.Rpc.GetMicroRequest> __Marshaller_Anno_Rpc_GetMicroRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Anno.Rpc.GetMicroRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Anno.Rpc.GetMicroReply> __Marshaller_Anno_Rpc_GetMicroReply = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Anno.Rpc.GetMicroReply.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Anno.Rpc.BrokerRequest> __Marshaller_Anno_Rpc_BrokerRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Anno.Rpc.BrokerRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Protobuf.WellKnownTypes.Empty> __Marshaller_google_protobuf_Empty = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Protobuf.WellKnownTypes.Empty.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Anno.Rpc.PingReply> __Marshaller_Anno_Rpc_PingReply = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Anno.Rpc.PingReply.Parser.ParseFrom);

    static readonly grpc::Method<global::Anno.Rpc.Micro, global::Anno.Rpc.BrokerReply> __Method_Add_broker = new grpc::Method<global::Anno.Rpc.Micro, global::Anno.Rpc.BrokerReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Add_broker",
        __Marshaller_Anno_Rpc_Micro,
        __Marshaller_Anno_Rpc_BrokerReply);

    static readonly grpc::Method<global::Anno.Rpc.GetMicroRequest, global::Anno.Rpc.GetMicroReply> __Method_GetMicro = new grpc::Method<global::Anno.Rpc.GetMicroRequest, global::Anno.Rpc.GetMicroReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetMicro",
        __Marshaller_Anno_Rpc_GetMicroRequest,
        __Marshaller_Anno_Rpc_GetMicroReply);

    static readonly grpc::Method<global::Anno.Rpc.BrokerRequest, global::Anno.Rpc.BrokerReply> __Method_Invoke = new grpc::Method<global::Anno.Rpc.BrokerRequest, global::Anno.Rpc.BrokerReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Invoke",
        __Marshaller_Anno_Rpc_BrokerRequest,
        __Marshaller_Anno_Rpc_BrokerReply);

    static readonly grpc::Method<global::Google.Protobuf.WellKnownTypes.Empty, global::Anno.Rpc.PingReply> __Method_Ping = new grpc::Method<global::Google.Protobuf.WellKnownTypes.Empty, global::Anno.Rpc.PingReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Ping",
        __Marshaller_google_protobuf_Empty,
        __Marshaller_Anno_Rpc_PingReply);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Anno.Rpc.BrokerReflection.Descriptor.Services[1]; }
    }

    /// <summary>Base class for server-side implementations of BrokerCenter</summary>
    [grpc::BindServiceMethod(typeof(BrokerCenter), "BindService")]
    public abstract partial class BrokerCenterBase
    {
      public virtual global::System.Threading.Tasks.Task<global::Anno.Rpc.BrokerReply> Add_broker(global::Anno.Rpc.Micro request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Anno.Rpc.GetMicroReply> GetMicro(global::Anno.Rpc.GetMicroRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Anno.Rpc.BrokerReply> Invoke(global::Anno.Rpc.BrokerRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Anno.Rpc.PingReply> Ping(global::Google.Protobuf.WellKnownTypes.Empty request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for BrokerCenter</summary>
    public partial class BrokerCenterClient : grpc::ClientBase<BrokerCenterClient>
    {
      /// <summary>Creates a new client for BrokerCenter</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public BrokerCenterClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for BrokerCenter that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public BrokerCenterClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected BrokerCenterClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected BrokerCenterClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      public virtual global::Anno.Rpc.BrokerReply Add_broker(global::Anno.Rpc.Micro request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Add_broker(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Anno.Rpc.BrokerReply Add_broker(global::Anno.Rpc.Micro request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Add_broker, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Anno.Rpc.BrokerReply> Add_brokerAsync(global::Anno.Rpc.Micro request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Add_brokerAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Anno.Rpc.BrokerReply> Add_brokerAsync(global::Anno.Rpc.Micro request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Add_broker, null, options, request);
      }
      public virtual global::Anno.Rpc.GetMicroReply GetMicro(global::Anno.Rpc.GetMicroRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetMicro(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Anno.Rpc.GetMicroReply GetMicro(global::Anno.Rpc.GetMicroRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetMicro, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Anno.Rpc.GetMicroReply> GetMicroAsync(global::Anno.Rpc.GetMicroRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetMicroAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Anno.Rpc.GetMicroReply> GetMicroAsync(global::Anno.Rpc.GetMicroRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetMicro, null, options, request);
      }
      public virtual global::Anno.Rpc.BrokerReply Invoke(global::Anno.Rpc.BrokerRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Invoke(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Anno.Rpc.BrokerReply Invoke(global::Anno.Rpc.BrokerRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Invoke, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Anno.Rpc.BrokerReply> InvokeAsync(global::Anno.Rpc.BrokerRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return InvokeAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Anno.Rpc.BrokerReply> InvokeAsync(global::Anno.Rpc.BrokerRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Invoke, null, options, request);
      }
      public virtual global::Anno.Rpc.PingReply Ping(global::Google.Protobuf.WellKnownTypes.Empty request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Ping(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Anno.Rpc.PingReply Ping(global::Google.Protobuf.WellKnownTypes.Empty request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Ping, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Anno.Rpc.PingReply> PingAsync(global::Google.Protobuf.WellKnownTypes.Empty request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PingAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Anno.Rpc.PingReply> PingAsync(global::Google.Protobuf.WellKnownTypes.Empty request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Ping, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override BrokerCenterClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new BrokerCenterClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(BrokerCenterBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_Add_broker, serviceImpl.Add_broker)
          .AddMethod(__Method_GetMicro, serviceImpl.GetMicro)
          .AddMethod(__Method_Invoke, serviceImpl.Invoke)
          .AddMethod(__Method_Ping, serviceImpl.Ping).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, BrokerCenterBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_Add_broker, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Anno.Rpc.Micro, global::Anno.Rpc.BrokerReply>(serviceImpl.Add_broker));
      serviceBinder.AddMethod(__Method_GetMicro, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Anno.Rpc.GetMicroRequest, global::Anno.Rpc.GetMicroReply>(serviceImpl.GetMicro));
      serviceBinder.AddMethod(__Method_Invoke, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Anno.Rpc.BrokerRequest, global::Anno.Rpc.BrokerReply>(serviceImpl.Invoke));
      serviceBinder.AddMethod(__Method_Ping, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Protobuf.WellKnownTypes.Empty, global::Anno.Rpc.PingReply>(serviceImpl.Ping));
    }

  }
}
#endregion
