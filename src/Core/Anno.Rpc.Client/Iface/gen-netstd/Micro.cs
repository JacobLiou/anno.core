/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Threading;
using System.Threading.Tasks;
using Thrift;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;



public partial class Micro : TBase
{
  private string _ip;
  private int _port;
  private int _timeout;
  private string _name;
  private string _nickname;
  private int _weight;

  public string Ip
  {
    get
    {
      return _ip;
    }
    set
    {
      __isset.ip = true;
      this._ip = value;
    }
  }

  public int Port
  {
    get
    {
      return _port;
    }
    set
    {
      __isset.port = true;
      this._port = value;
    }
  }

  public int Timeout
  {
    get
    {
      return _timeout;
    }
    set
    {
      __isset.timeout = true;
      this._timeout = value;
    }
  }

  public string Name
  {
    get
    {
      return _name;
    }
    set
    {
      __isset.name = true;
      this._name = value;
    }
  }

  public string Nickname
  {
    get
    {
      return _nickname;
    }
    set
    {
      __isset.nickname = true;
      this._nickname = value;
    }
  }

  public int Weight
  {
    get
    {
      return _weight;
    }
    set
    {
      __isset.weight = true;
      this._weight = value;
    }
  }


  public Isset __isset;
  public struct Isset
  {
    public bool ip;
    public bool port;
    public bool timeout;
    public bool name;
    public bool nickname;
    public bool weight;
  }

  public Micro()
  {
  }

  public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
  {
    iprot.IncrementRecursionDepth();
    try
    {
      TField field;
      await iprot.ReadStructBeginAsync(cancellationToken);
      while (true)
      {
        field = await iprot.ReadFieldBeginAsync(cancellationToken);
        if (field.Type == TType.Stop)
        {
          break;
        }

        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String)
            {
              Ip = await iprot.ReadStringAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 2:
            if (field.Type == TType.I32)
            {
              Port = await iprot.ReadI32Async(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 3:
            if (field.Type == TType.I32)
            {
              Timeout = await iprot.ReadI32Async(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 4:
            if (field.Type == TType.String)
            {
              Name = await iprot.ReadStringAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 5:
            if (field.Type == TType.String)
            {
              Nickname = await iprot.ReadStringAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 6:
            if (field.Type == TType.I32)
            {
              Weight = await iprot.ReadI32Async(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          default: 
            await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            break;
        }

        await iprot.ReadFieldEndAsync(cancellationToken);
      }

      await iprot.ReadStructEndAsync(cancellationToken);
    }
    finally
    {
      iprot.DecrementRecursionDepth();
    }
  }

  public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
  {
    oprot.IncrementRecursionDepth();
    try
    {
      var struc = new TStruct("Micro");
      await oprot.WriteStructBeginAsync(struc, cancellationToken);
      var field = new TField();
      if (Ip != null && __isset.ip)
      {
        field.Name = "ip";
        field.Type = TType.String;
        field.ID = 1;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteStringAsync(Ip, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (__isset.port)
      {
        field.Name = "port";
        field.Type = TType.I32;
        field.ID = 2;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteI32Async(Port, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (__isset.timeout)
      {
        field.Name = "timeout";
        field.Type = TType.I32;
        field.ID = 3;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteI32Async(Timeout, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (Name != null && __isset.name)
      {
        field.Name = "name";
        field.Type = TType.String;
        field.ID = 4;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteStringAsync(Name, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (Nickname != null && __isset.nickname)
      {
        field.Name = "nickname";
        field.Type = TType.String;
        field.ID = 5;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteStringAsync(Nickname, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (__isset.weight)
      {
        field.Name = "weight";
        field.Type = TType.I32;
        field.ID = 6;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteI32Async(Weight, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      await oprot.WriteFieldStopAsync(cancellationToken);
      await oprot.WriteStructEndAsync(cancellationToken);
    }
    finally
    {
      oprot.DecrementRecursionDepth();
    }
  }

  public override bool Equals(object that)
  {
    var other = that as Micro;
    if (other == null) return false;
    if (ReferenceEquals(this, other)) return true;
    return ((__isset.ip == other.__isset.ip) && ((!__isset.ip) || (System.Object.Equals(Ip, other.Ip))))
      && ((__isset.port == other.__isset.port) && ((!__isset.port) || (System.Object.Equals(Port, other.Port))))
      && ((__isset.timeout == other.__isset.timeout) && ((!__isset.timeout) || (System.Object.Equals(Timeout, other.Timeout))))
      && ((__isset.name == other.__isset.name) && ((!__isset.name) || (System.Object.Equals(Name, other.Name))))
      && ((__isset.nickname == other.__isset.nickname) && ((!__isset.nickname) || (System.Object.Equals(Nickname, other.Nickname))))
      && ((__isset.weight == other.__isset.weight) && ((!__isset.weight) || (System.Object.Equals(Weight, other.Weight))));
  }

  public override int GetHashCode() {
    int hashcode = 157;
    unchecked {
      if(__isset.ip)
        hashcode = (hashcode * 397) + Ip.GetHashCode();
      if(__isset.port)
        hashcode = (hashcode * 397) + Port.GetHashCode();
      if(__isset.timeout)
        hashcode = (hashcode * 397) + Timeout.GetHashCode();
      if(__isset.name)
        hashcode = (hashcode * 397) + Name.GetHashCode();
      if(__isset.nickname)
        hashcode = (hashcode * 397) + Nickname.GetHashCode();
      if(__isset.weight)
        hashcode = (hashcode * 397) + Weight.GetHashCode();
    }
    return hashcode;
  }

  public override string ToString()
  {
    var sb = new StringBuilder("Micro(");
    bool __first = true;
    if (Ip != null && __isset.ip)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("Ip: ");
      sb.Append(Ip);
    }
    if (__isset.port)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("Port: ");
      sb.Append(Port);
    }
    if (__isset.timeout)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("Timeout: ");
      sb.Append(Timeout);
    }
    if (Name != null && __isset.name)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("Name: ");
      sb.Append(Name);
    }
    if (Nickname != null && __isset.nickname)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("Nickname: ");
      sb.Append(Nickname);
    }
    if (__isset.weight)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("Weight: ");
      sb.Append(Weight);
    }
    sb.Append(")");
    return sb.ToString();
  }
}

