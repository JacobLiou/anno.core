/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace Anno.Rpc
{
  public partial class BrokerCenter {
    public interface ISync {
      bool add_broker(Dictionary<string, string> input);
      List<Micro> GetMicro(string channel);
      string Invoke(Dictionary<string, string> input);
    }

    public interface Iface : ISync {
      #if SILVERLIGHT
      IAsyncResult Begin_add_broker(AsyncCallback callback, object state, Dictionary<string, string> input);
      bool End_add_broker(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_GetMicro(AsyncCallback callback, object state, string channel);
      List<Micro> End_GetMicro(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_Invoke(AsyncCallback callback, object state, Dictionary<string, string> input);
      string End_Invoke(IAsyncResult asyncResult);
      #endif
    }

    public class Client : IDisposable, Iface {
      public Client(TProtocol prot) : this(prot, prot)
      {
      }

      public Client(TProtocol iprot, TProtocol oprot)
      {
        iprot_ = iprot;
        oprot_ = oprot;
      }

      protected TProtocol iprot_;
      protected TProtocol oprot_;
      protected int seqid_;

      public TProtocol InputProtocol
      {
        get { return iprot_; }
      }
      public TProtocol OutputProtocol
      {
        get { return oprot_; }
      }


      #region " IDisposable Support "
      private bool _IsDisposed;

      // IDisposable
      public void Dispose()
      {
        Dispose(true);
      }
      

      protected virtual void Dispose(bool disposing)
      {
        if (!_IsDisposed)
        {
          if (disposing)
          {
            if (iprot_ != null)
            {
              ((IDisposable)iprot_).Dispose();
            }
            if (oprot_ != null)
            {
              ((IDisposable)oprot_).Dispose();
            }
          }
        }
        _IsDisposed = true;
      }
      #endregion


      
      #if SILVERLIGHT
      public IAsyncResult Begin_add_broker(AsyncCallback callback, object state, Dictionary<string, string> input)
      {
        return send_add_broker(callback, state, input);
      }

      public bool End_add_broker(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_add_broker();
      }

      #endif

      public bool add_broker(Dictionary<string, string> input)
      {
        #if !SILVERLIGHT
        send_add_broker(input);
        return recv_add_broker();

        #else
        var asyncResult = Begin_add_broker(null, null, input);
        return End_add_broker(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_add_broker(AsyncCallback callback, object state, Dictionary<string, string> input)
      #else
      public void send_add_broker(Dictionary<string, string> input)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("add_broker", TMessageType.Call, seqid_));
        add_broker_args args = new add_broker_args();
        args.Input = input;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public bool recv_add_broker()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        add_broker_result result = new add_broker_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "add_broker failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_GetMicro(AsyncCallback callback, object state, string channel)
      {
        return send_GetMicro(callback, state, channel);
      }

      public List<Micro> End_GetMicro(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_GetMicro();
      }

      #endif

      public List<Micro> GetMicro(string channel)
      {
        #if !SILVERLIGHT
        send_GetMicro(channel);
        return recv_GetMicro();

        #else
        var asyncResult = Begin_GetMicro(null, null, channel);
        return End_GetMicro(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_GetMicro(AsyncCallback callback, object state, string channel)
      #else
      public void send_GetMicro(string channel)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("GetMicro", TMessageType.Call, seqid_));
        GetMicro_args args = new GetMicro_args();
        args.Channel = channel;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public List<Micro> recv_GetMicro()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GetMicro_result result = new GetMicro_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetMicro failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_Invoke(AsyncCallback callback, object state, Dictionary<string, string> input)
      {
        return send_Invoke(callback, state, input);
      }

      public string End_Invoke(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_Invoke();
      }

      #endif

      public string Invoke(Dictionary<string, string> input)
      {
        #if !SILVERLIGHT
        send_Invoke(input);
        return recv_Invoke();

        #else
        var asyncResult = Begin_Invoke(null, null, input);
        return End_Invoke(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_Invoke(AsyncCallback callback, object state, Dictionary<string, string> input)
      #else
      public void send_Invoke(Dictionary<string, string> input)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("Invoke", TMessageType.Call, seqid_));
        Invoke_args args = new Invoke_args();
        args.Input = input;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_Invoke()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        Invoke_result result = new Invoke_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Invoke failed: unknown result");
      }

    }
    public class Processor : TProcessor {
      public Processor(ISync iface)
      {
        iface_ = iface;
        processMap_["add_broker"] = add_broker_Process;
        processMap_["GetMicro"] = GetMicro_Process;
        processMap_["Invoke"] = Invoke_Process;
      }

      protected delegate void ProcessFunction(int seqid, TProtocol iprot, TProtocol oprot);
      private ISync iface_;
      protected Dictionary<string, ProcessFunction> processMap_ = new Dictionary<string, ProcessFunction>();

      public bool Process(TProtocol iprot, TProtocol oprot)
      {
        try
        {
          TMessage msg = iprot.ReadMessageBegin();
          ProcessFunction fn;
          processMap_.TryGetValue(msg.Name, out fn);
          if (fn == null) {
            TProtocolUtil.Skip(iprot, TType.Struct);
            iprot.ReadMessageEnd();
            TApplicationException x = new TApplicationException (TApplicationException.ExceptionType.UnknownMethod, "Invalid method name: '" + msg.Name + "'");
            oprot.WriteMessageBegin(new TMessage(msg.Name, TMessageType.Exception, msg.SeqID));
            x.Write(oprot);
            oprot.WriteMessageEnd();
            oprot.Transport.Flush();
            return true;
          }
          fn(msg.SeqID, iprot, oprot);
        }
        catch (IOException)
        {
          return false;
        }
        return true;
      }

      public void add_broker_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        add_broker_args args = new add_broker_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        add_broker_result result = new add_broker_result();
        try
        {
          result.Success = iface_.add_broker(args.Input);
          oprot.WriteMessageBegin(new TMessage("add_broker", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("add_broker", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void GetMicro_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GetMicro_args args = new GetMicro_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GetMicro_result result = new GetMicro_result();
        try
        {
          result.Success = iface_.GetMicro(args.Channel);
          oprot.WriteMessageBegin(new TMessage("GetMicro", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("GetMicro", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void Invoke_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        Invoke_args args = new Invoke_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        Invoke_result result = new Invoke_result();
        try
        {
          result.Success = iface_.Invoke(args.Input);
          oprot.WriteMessageBegin(new TMessage("Invoke", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("Invoke", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class add_broker_args : TBase
    {
      private Dictionary<string, string> _input;

      public Dictionary<string, string> Input
      {
        get
        {
          return _input;
        }
        set
        {
          __isset.input = true;
          this._input = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool input;
      }

      public add_broker_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Map) {
                  {
                    Input = new Dictionary<string, string>();
                    TMap _map5 = iprot.ReadMapBegin();
                    for( int _i6 = 0; _i6 < _map5.Count; ++_i6)
                    {
                      string _key7;
                      string _val8;
                      _key7 = iprot.ReadString();
                      _val8 = iprot.ReadString();
                      Input[_key7] = _val8;
                    }
                    iprot.ReadMapEnd();
                  }
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("add_broker_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (Input != null && __isset.input) {
            field.Name = "input";
            field.Type = TType.Map;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteMapBegin(new TMap(TType.String, TType.String, Input.Count));
              foreach (string _iter9 in Input.Keys)
              {
                oprot.WriteString(_iter9);
                oprot.WriteString(Input[_iter9]);
              }
              oprot.WriteMapEnd();
            }
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("add_broker_args(");
        bool __first = true;
        if (Input != null && __isset.input) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Input: ");
          __sb.Append(Input);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class add_broker_result : TBase
    {
      private bool _success;

      public bool Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public add_broker_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Bool) {
                  Success = iprot.ReadBool();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("add_broker_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            field.Name = "Success";
            field.Type = TType.Bool;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteBool(Success);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("add_broker_result(");
        bool __first = true;
        if (__isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetMicro_args : TBase
    {
      private string _channel;

      public string Channel
      {
        get
        {
          return _channel;
        }
        set
        {
          __isset.channel = true;
          this._channel = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool channel;
      }

      public GetMicro_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  Channel = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("GetMicro_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (Channel != null && __isset.channel) {
            field.Name = "channel";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Channel);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("GetMicro_args(");
        bool __first = true;
        if (Channel != null && __isset.channel) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Channel: ");
          __sb.Append(Channel);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetMicro_result : TBase
    {
      private List<Micro> _success;

      public List<Micro> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public GetMicro_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.List) {
                  {
                    Success = new List<Micro>();
                    TList _list10 = iprot.ReadListBegin();
                    for( int _i11 = 0; _i11 < _list10.Count; ++_i11)
                    {
                      Micro _elem12;
                      _elem12 = new Micro();
                      _elem12.Read(iprot);
                      Success.Add(_elem12);
                    }
                    iprot.ReadListEnd();
                  }
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("GetMicro_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.List;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              {
                oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
                foreach (Micro _iter13 in Success)
                {
                  _iter13.Write(oprot);
                }
                oprot.WriteListEnd();
              }
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("GetMicro_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Invoke_args : TBase
    {
      private Dictionary<string, string> _input;

      public Dictionary<string, string> Input
      {
        get
        {
          return _input;
        }
        set
        {
          __isset.input = true;
          this._input = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool input;
      }

      public Invoke_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Map) {
                  {
                    Input = new Dictionary<string, string>();
                    TMap _map14 = iprot.ReadMapBegin();
                    for( int _i15 = 0; _i15 < _map14.Count; ++_i15)
                    {
                      string _key16;
                      string _val17;
                      _key16 = iprot.ReadString();
                      _val17 = iprot.ReadString();
                      Input[_key16] = _val17;
                    }
                    iprot.ReadMapEnd();
                  }
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Invoke_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (Input != null && __isset.input) {
            field.Name = "input";
            field.Type = TType.Map;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteMapBegin(new TMap(TType.String, TType.String, Input.Count));
              foreach (string _iter18 in Input.Keys)
              {
                oprot.WriteString(_iter18);
                oprot.WriteString(Input[_iter18]);
              }
              oprot.WriteMapEnd();
            }
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Invoke_args(");
        bool __first = true;
        if (Input != null && __isset.input) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Input: ");
          __sb.Append(Input);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Invoke_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public Invoke_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String) {
                  Success = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Invoke_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              oprot.WriteString(Success);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Invoke_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }

  }
}
